type List(a) =
| a :: List(a)
| []

: List(_) -> Bool
let empty = match {
| [] -> True
| _ -> False
}

> [].empty() ~> True
> [1, 2, 3].empty ~> False

: List(_) -> Int
let length = match {
| [] -> 0
| [x, ..xs] -> 1 + length(xs)
}

> [].length() ~> 0
> [1].length() ~> 1
> [1, 2, 3].length() ~> 3

: List(a) -> Maybe(a)
let first = match {
| [] -> None
| [x, ..] -> Some(x)
}

> [].first() ~> None
> [1, 2, 3].first() ~> Some(1)

: List(a) -> Maybe(a)
let last = match {
| [] -> None
| [x] -> Some(x)
| [_, ..xs] -> last(xs)
}

> [].last() ~> None
> [1, 2, 3].last() ~> Some(3)

: (List(a), List(a)) -> List(a)
let (++) = match {
| ([], ys) -> ys
| ([x, ..xs], ys) -> x :: (xs ++ ys)
}

> [] ++ [1, 2, 3] ~> [1, 2, 3]
> [1] ++ [2, 3] ~> [1, 2, 3]
> [1, 2] ++ [3] ~> [1, 2, 3]
> [1, 2, 3] ++ [] ~> [1, 2, 3]

: (List(a), Int) -> Maybe(a)
let (.[]) = match {
| ([], _) -> None
| ([x, ..], 1) -> Some(x)
| ([_, ..xs], i) -> xs[i - 1]
}

> [10, 20, 30][0] ~> None
> [10, 20, 30][1] ~> Some(10)
> [10, 20, 30][2] ~> Some(20)
> [10, 20, 30][3] ~> Some(30)
> [10, 20, 30][4] ~> None
> [10, 20, 30][-1] ~> None

: (List(a), Int) -> Maybe(a)
let get = match {
| (xs, i) if i < 0 -> xs[xs.length() + i + 1]
| (xs, i) -> xs[i]
}

> [10, 20, 30].get(0) ~> None
> [10, 20, 30].get(1) ~> Some(10)
> [10, 20, 30].get(2) ~> Some(20)
> [10, 20, 30].get(3) ~> Some(30)
> [10, 20, 30].get(4) ~> None
> [10, 20, 30].get(-1) ~> Some(30)
> [10, 20, 30].get(-2) ~> Some(20)
> [10, 20, 30].get(-3) ~> Some(10)
> [10, 20, 30].get(-4) ~> None

# or in [idx] [start..end]
# length, empty, flatten
# map, filter, flat-map, foldl, foldr
# push, pop, add, remove
# all, any, max, min, sum, product, average, count
# repeat, range, reverse
# split, join, intercalate, sort, replace
# take, drop, pad, trim, partition, zip, unzip
# starts-with, ends-with
# find
# List comprehensions


