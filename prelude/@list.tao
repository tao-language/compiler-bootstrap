type List(a) =
| a :: List(a)
| []

: List(a) -> Int
let length = match {
| [] -> 0
| (x :: xs) -> 1 + length(xs)
}

> [].length() ~> 0
> [1].length() ~> 1
> [1, 2].length() ~> 2

# (++) or in [idx] [start..end]
# length, empty, flatten
# map, filter, flat-map, foldl, foldr
# push, pop, add, remove
# all, any, max, min, sum, product, average, count
# repeat, range, reverse
# split, join, intercalate, sort, replace
# take, drop, pad, trim, partition, zip, unzip
# starts-with, ends-with
# find
# List comprehensions


