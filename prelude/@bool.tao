type Bool {
| True
| False
}

: Bool -> Bool
let (not) = match {
| True -> False
| _ -> True
}

: (Bool, Bool) -> Bool
let (and) = match {
| (True, True) -> True
| _ -> False
}

: (Bool, Bool) -> Bool
let (or) = match {
| (False, False) -> False
| _ -> True
}

: (Bool, Bool) -> Bool
let (xor) = match {
| (x, x) -> False
| _ -> True
}
