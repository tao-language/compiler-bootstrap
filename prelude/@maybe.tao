type Maybe(a) =
| Some(a)
| None

: (Maybe(a), a -> b) -> Maybe(b)
let map(m, f) = match m {
| Some(x) -> Some(f(x))
| None -> None
}

> map(Some(1), x -> x) ~> Some(1)
> map(None, x -> x) ~> None

: (Maybe(a), a -> b) -> Maybe(b)
let (<-) = map

> let x <- Some(1); x ~> Some(1)
> let x <- None; x ~> None

: (Maybe(a), a) -> a
let m or y = match m {
| Some(x) -> x
| None -> y
}

> Some(1) or 2 ~> 1
> None or 2 ~> 2
