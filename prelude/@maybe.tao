type Maybe(a) =
| Some(a)
| None

: (Maybe(a), a -> b) -> Maybe(b)
let (<-)(m, f) = match m {
| Some(x) -> Some(f(x))
| None -> None
}

> let x <- Some(1); x ~> 1
> let x <- None; x ~> None

: (Maybe(a), a -> b) -> Maybe(b)
let map(m, f) =
  let x <- m
  f(x)

> map(Some(1), x -> x + 1) ~> Some(2)
> map(None, x -> x + 1) ~> None

: (Maybe(a), a) -> a
let m or y = match m {
| Some(x) -> x
| None -> y
}

> Some(1) or 2 ~> 1
> None or 2 ~> 2
