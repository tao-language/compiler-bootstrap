type Maybe(a) =
| Some(a)
| None

: (Maybe(a), a -> b) -> Maybe(b)
let map(m, f) = match m {
| Some(x) -> Some(f(x))
| None -> None
}

> map(Some(1), x -> A(x)) ~> Some(A(1))
> Some(1).map(x -> A(x)) ~> Some(A(1))
> None.map(x -> A(x)) ~> None

: (Maybe(a), a -> b) -> Maybe(b)
let (<-) = map

> do {let x <- Some(1); return A(x)} ~> Some(A(1))
> do {let x <- None; return A(x)} ~> None

: (Maybe(a), a) -> a
let m or y = match m {
| Some(x) -> x
| None -> y
}

> Some(1) or 2 ~> 1
> None or 2 ~> 2
