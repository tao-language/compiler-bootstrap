: (Int, Int) -> Bool
let x < y = %int_lt(x, y)

> 1 < 1 ~> False
> 1 < 2 ~> True
> 2 < 1 ~> False

: (Num, Num) -> Bool
let x < y = %num_lt(x, y)

> 1.0 < 1.0 ~> False
> 1.0 < 2.0 ~> True
> 2.0 < 1.0 ~> False

: (a, a) -> Bool
let (==) = match {
| (x, x) -> True
| _ -> False
}

> 1 == 1 ~> True
> 1 == 2 ~> False
> 2 == 1 ~> False

> 1.0 == 1.0 ~> True
> 1.0 == 2.0 ~> False
> 2.0 == 1.0 ~> False

: (a, a) -> Bool
let x != y = not (x == y)

> 1 != 1 ~> False
> 1 != 2 ~> True
> 2 != 1 ~> True

> 1.0 != 1.0 ~> False
> 1.0 != 2.0 ~> True
> 2.0 != 1.0 ~> True

: (a, a) -> Bool
let x <= y = not (y < x)

> 1 <= 1 ~> True
> 1 <= 2 ~> True
> 2 <= 1 ~> False

> 1.0 <= 1.0 ~> True
> 1.0 <= 2.0 ~> True
> 2.0 <= 1.0 ~> False

: (a, a) -> Bool
let x > y = y < x

> 1 > 1 ~> False
> 1 > 2 ~> False
> 2 > 1 ~> True

> 1.0 > 1.0 ~> False
> 1.0 > 2.0 ~> False
> 2.0 > 1.0 ~> True

: (a, a) -> Bool
let x >= y = not (x < y)

> 1 >= 1 ~> True
> 1 >= 2 ~> False
> 2 >= 1 ~> True

> 1.0 >= 1.0 ~> True
> 1.0 >= 2.0 ~> False
> 2.0 >= 1.0 ~> True

: a -> a
let id(x) = x

let f(1) = 2
let f(1.0) = 2.0

# @y. f(y) ~> @y. (f(y : Int) | f(y : Num)) : (Int | Num)
# @y. id(f(y)) ~> @y. id(f(y : Int)) | id(f(y : Num)) : (Int | Num)
# y -> id(f(y)) ~> (y : Int) -> id(f(..)) | (y : Num) -> id(f(..)) : (Int -> Int | Num -> Num)
let g(y) = id(f(y))
